basePath: /
consumes:
- application/json
host: localhost:3000
info:
  contact:
    email: ashutoshgngwr@gmail.com
    name: Ashutosh Gangwar
    url: https://ashutoshgngwr.github.io
  description: APIs for a simple trello board application to manage users and their
    tasks.
  license:
    name: Proprietary
  title: backend-assignment
  version: 1.0.0
paths:
  /boards:
    post:
      consumes:
      - application/json
      description: Creates a new board and sets the current user as its admin
      operationId: createBoard
      parameters:
      - in: body
        name: Body
        schema:
          properties:
            name:
              type: string
              x-go-name: Name
          type: object
      produces:
      - application/json
      responses:
        "201":
          $ref: '#/responses/created'
        "400":
          $ref: '#/responses/errored'
        "403":
          $ref: '#/responses/errored'
        "500":
          $ref: '#/responses/errored'
      schemes:
      - http
      - https
      tags:
      - board
  /boards/{boardID}:
    get:
      consumes:
      - application/json
      description: Check if a logged in user has access to the given board
      operationId: getBoard
      parameters:
      - format: uint64
        in: path
        name: boardID
        required: true
        type: integer
        x-go-name: BoardID
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/getBoard'
        "400":
          $ref: '#/responses/errored'
        "404":
          $ref: '#/responses/errored'
        "500":
          $ref: '#/responses/errored'
      schemes:
      - http
      - https
      tags:
      - board
  /boards/{boardID}/archive:
    get:
      consumes:
      - application/json
      description: Archive board with given ID
      operationId: archiveBoard
      parameters:
      - format: uint64
        in: path
        name: boardID
        required: true
        type: integer
        x-go-name: BoardID
      produces:
      - application/json
      responses:
        "202":
          $ref: '#/responses/archiveBoard'
        "400":
          $ref: '#/responses/errored'
        "404":
          $ref: '#/responses/errored'
        "500":
          $ref: '#/responses/errored'
      schemes:
      - http
      - https
      tags:
      - board
  /boards/{boardID}/unarchive:
    get:
      consumes:
      - application/json
      description: Unarchive board with given ID
      operationId: unarchiveBoard
      parameters:
      - format: uint64
        in: path
        name: boardID
        required: true
        type: integer
        x-go-name: BoardID
      produces:
      - application/json
      responses:
        "202":
          $ref: '#/responses/unarchiveBoard'
        "400":
          $ref: '#/responses/errored'
        "404":
          $ref: '#/responses/errored'
        "500":
          $ref: '#/responses/errored'
      schemes:
      - http
      - https
      tags:
      - board
  /boards/{boardID}/user:
    delete:
      consumes:
      - application/json
      description: Removes the provided user to the given board
      operationId: removeUser
      parameters:
      - format: uint64
        in: path
        name: boardID
        required: true
        type: integer
        x-go-name: BoardID
      - in: body
        name: Body
        schema:
          properties:
            user_id:
              format: uint64
              type: integer
              x-go-name: UserID
          type: object
      produces:
      - application/json
      responses:
        "201":
          $ref: '#/responses/assignOrRemoveUser'
        "400":
          $ref: '#/responses/errored'
        "404":
          $ref: '#/responses/errored'
        "500":
          $ref: '#/responses/errored'
      schemes:
      - http
      - https
      tags:
      - board
    put:
      consumes:
      - application/json
      description: Adds the provided user to the given board
      operationId: assignUser
      parameters:
      - format: uint64
        in: path
        name: boardID
        required: true
        type: integer
        x-go-name: BoardID
      - in: body
        name: Body
        schema:
          properties:
            user_id:
              format: uint64
              type: integer
              x-go-name: UserID
          type: object
      produces:
      - application/json
      responses:
        "201":
          $ref: '#/responses/assignOrRemoveUser'
        "400":
          $ref: '#/responses/errored'
        "404":
          $ref: '#/responses/errored'
        "500":
          $ref: '#/responses/errored'
      schemes:
      - http
      - https
      tags:
      - board
  /users/{userID}:
    get:
      consumes:
      - application/json
      description: Get a user by their ID
      operationId: getUser
      parameters:
      - in: path
        name: userID
        required: true
        type: string
        x-go-name: UserID
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/getUser'
        "404":
          $ref: '#/responses/errored'
        "500":
          $ref: '#/responses/errored'
      schemes:
      - http
      - https
      tags:
      - user
  /users/login:
    post:
      consumes:
      - application/json
      description: Login a user using credentials to issue a session token
      operationId: loginUser
      parameters:
      - in: body
        name: Credentials
        required: true
        schema:
          properties:
            email:
              type: string
              x-go-name: Email
            password:
              type: string
              x-go-name: Password
          type: object
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/loginResponse'
        "400":
          $ref: '#/responses/errored'
        "403":
          $ref: '#/responses/errored'
        "500":
          $ref: '#/responses/errored'
      schemes:
      - http
      - https
      tags:
      - user
  /users/logout:
    get:
      consumes:
      - application/json
      description: Revokes the current session token for the user
      operationId: logoutUser
      produces:
      - application/json
      responses:
        "201":
          $ref: '#/responses/logoutResponse'
        "403":
          $ref: '#/responses/errored'
        "500":
          $ref: '#/responses/errored'
      schemes:
      - http
      - https
      tags:
      - user
  /users/signup:
    post:
      consumes:
      - application/json
      operationId: signupUser
      parameters:
      - in: body
        name: User
        required: true
        schema:
          properties:
            email:
              type: string
              x-go-name: Email
            name:
              type: string
              x-go-name: Name
            password:
              type: string
              x-go-name: Password
          type: object
      produces:
      - application/json
      responses:
        "201":
          $ref: '#/responses/created'
        "400":
          $ref: '#/responses/errored'
        "500":
          $ref: '#/responses/errored'
      schemes:
      - http
      - https
      summary: Register a new user with the system.
      tags:
      - user
produces:
- application/json
responses:
  archiveBoard:
    description: Successfully archived
  assignOrRemoveUser:
    description: Indicates operation success
  created:
    description: |-
      Returned on successful resource creation. It also contains the path of created
      resource on the server.
    schema:
      properties:
        href:
          type: string
          x-go-name: Href
      type: object
  errored:
    description: A response that indicates error in performed operation
    schema:
      properties:
        error:
          type: string
          x-go-name: Error
      type: object
  getBoard:
    description: Indicates that user is assigned to the board
  getUser:
    description: Returns requested user
    schema:
      properties:
        email:
          type: string
          x-go-name: Email
        id:
          format: uint64
          type: integer
          x-go-name: ID
        is_admin:
          type: boolean
          x-go-name: IsAdmin
        name:
          type: string
          x-go-name: Name
      type: object
  loginResponse:
    description: loginReponse returns a session token in Authorization header on successful
      login
    headers:
      Authorization:
        description: Bearer <token>
        type: string
  logoutResponse:
    description: indicates successful logout
  unarchiveBoard:
    description: Successfully unarchived
schemes:
- http
securityDefinitions:
  api_key:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
